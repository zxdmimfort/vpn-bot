import logging
import datetime
from aiogram import F, Router, types
from aiogram.filters import Command, CommandStart, or_f
from sqlalchemy.ext.asyncio import AsyncSession
from typing import cast

from app.db.repository import ConnectionRepository, UserRepository
from app.dependencies.auth import get_admins_list
from app.kbds.menu_markups import (
    UserAction,
    UserActionData,
    create_back_button,
    get_my_connections_markup,
    get_user_actions_markup,
    get_view_connection_markup,
)
from app.db.models import User
from app.login_client import get_async_client

router = Router()
admins: tuple[str, ...] = get_admins_list()
logger = logging.getLogger(__name__)


async def _check_message_accessible(query: types.CallbackQuery) -> types.Message | None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.

    Args:
        query: Callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        Message | None: –û–±—ä–µ–∫—Ç Message –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ, None –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    if not query.message or isinstance(query.message, types.InaccessibleMessage):
        await query.answer("‚ùå –û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        return None
    return cast(types.Message, query.message)


def _handle_start_action(
    chat: types.Chat,
    user: User | None,
) -> tuple[str, types.InlineKeyboardMarkup]:
    """
    –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ start/help.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        chat: –û–±—ä–µ–∫—Ç —á–∞—Ç–∞
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        tuple: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    """
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ /help", chat.username)

    markup = get_user_actions_markup(
        username=chat.username or "",
        admins=admins,
        chat_id=chat.id,
        user_id=user.id if user else None,
        is_admin=user.admin if user else False,
    )

    return "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", markup


@router.message(or_f(Command("help"), CommandStart()))
async def start_command(
    message: types.Message,
    user: User | None,
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ /start –∏ /help —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    text, markup = _handle_start_action(message.chat, user)
    await message.answer(text=text, reply_markup=markup)


@router.callback_query(UserActionData.filter(F.action == UserAction.startbutton))
async def start_callback(
    query: types.CallbackQuery,
    user: User | None,
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç.

    Args:
        query: Callback query
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    message = await _check_message_accessible(query)
    if not message:
        return

    await query.answer()
    text, markup = _handle_start_action(message.chat, user)
    await query.message.answer(text=text, reply_markup=markup)


@router.message(Command("op"))
async def op_me(
    message: types.Message,
    user: User | None,
    session: AsyncSession,
) -> None:
    """
    Op/deop if username exist in admin list.
    """
    logger.info("User %s triggered /op", message.chat.username)
    if not user:
        await message.answer("You need to register first!")
        logger.warning(
            "User %s tried to access /op without registration",
            message.chat.username,
        )
        return

    if message.chat.username in admins:
        user = await UserRepository(session).update(
            user,
            admin=not user.admin,
        )
    logger.info("User %s updated admin status to %s", message.chat.username, user.admin)
    await message.answer(f"OP successfully and your status: {user.admin}")


@router.callback_query(UserActionData.filter(F.action == UserAction.register))
async def send_register(
    query: types.CallbackQuery,
    callback_data: UserActionData,
    session: AsyncSession,
    user: User | None,
) -> None:
    """
    Register a user in the database.
    """
    logger.info("User %s triggered registration", query.from_user.username)
    if not user:
        user = await UserRepository(session).create(
            chat_id=query.from_user.id,
            username=query.from_user.username,
            first_name=query.from_user.first_name,
        )
        text = f"–û—Ö–∞–π–æ, {query.from_user.username}!üññ"
        logger.info("User %s registered successfully", query.from_user.username)
    else:
        text = "–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!"
        logger.warning("User %s attempted to register again", query.from_user.username)

    await query.answer(text)

    message = await _check_message_accessible(query)
    if message is None:
        return

    await message.answer(
        text,
        reply_markup=get_user_actions_markup(
            query.from_user.username or "",
            admins,
            query.from_user.id,
            user_id=user.id if user else None,
        ),
    )


@router.callback_query(UserActionData.filter(F.action == UserAction.conlist))
async def get_connections(
    query: types.CallbackQuery,
    callback_data: UserActionData,
    session: AsyncSession,
    user: User | None,
) -> None:
    logger.info("User %s requested connections list", query.from_user.username)
    if not user:
        await query.answer("You need to register first!")
        logger.warning(
            "User %s tried to get connections without registration",
            query.from_user.username,
        )
        return

    connections = await ConnectionRepository(session).get_by_user_id(
        user_id=user.id, show_deleted=user.admin
    )
    if not connections:
        await query.answer("No connections found.")
        logger.info("No connections found for user %s", query.from_user.username)
        return

    await query.answer("We found your connections.")
    logger.info("Connections found for user %s", query.from_user.username)

    message = await _check_message_accessible(query)
    if message is None:
        return

    back_button = create_back_button(
        UserActionData(
            action=UserAction.startbutton,
            chat_id=query.from_user.id,
            user_id=user.id,
        )
    )
    await message.answer(
        "–í–∞—à–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:",
        reply_markup=get_my_connections_markup(
            query.from_user.id,
            user.id,
            connections,
            back_button=back_button,
        ),
    )


@router.callback_query(UserActionData.filter(F.action == UserAction.addcon))
async def add_connection(
    query: types.CallbackQuery,
    callback_data: UserActionData,
    session: AsyncSession,
    user: User | None,
) -> None:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        query: Callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        callback_data: –î–∞–Ω–Ω—ã–µ –∏–∑ callback
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    """
    expiry_time_days = 3
    logger.info("User %s requested to add a connection", query.from_user.username)

    if not user:
        await query.answer("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")
        logger.warning(
            "–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %s", query.from_user.username
        )
        return

    username = user.username
    if not username:
        await query.answer(
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å username –≤ Telegram"
        )
        logger.warning(
            "–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–µ–∑ username –≤ Telegram: user_id=%s",
            user.id,
        )
        return

    try:
        api_client = get_async_client()
        email = await api_client.add_connection(
            username=username,
            tg_id=user.id,
            limit_ip=3,
            expiry_time_days=expiry_time_days,
        )

        if not email:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å email –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")

        inbound = await api_client.get_inbound()
        if not inbound:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å inbound")

        connection = await api_client.get_connection(inbound, email=email)
        if not connection:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")

        connection_url = api_client.create_link(connection, inbound)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await ConnectionRepository(session).create(
            inbound=api_client.inbound_id,
            email=email,
            connection_url=connection_url,
            created_at=datetime.datetime.now(datetime.UTC),
            expired_at=datetime.datetime.now(datetime.UTC)
            + datetime.timedelta(days=expiry_time_days),
            uuid=connection.id,
            user=user,
            host="scvnotready.online",
        )

        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è %s", query.from_user.username)
        await query.answer("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ")
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"
        logger.error(error_msg, exc_info=True)
        await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        return

    message = await _check_message_accessible(query)
    if message is None:
        return

    await message.answer(
        "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ.",
        reply_markup=get_user_actions_markup(
            query.from_user.username or "",
            admins,
            query.from_user.id,
            user_id=user.id,
        ),
    )


@router.callback_query(UserActionData.filter(F.action == UserAction.viewcon))
async def view_connection(
    query: types.CallbackQuery,
    callback_data: UserActionData,
    session: AsyncSession,
    user: User | None,
) -> None:
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏.

    Args:
        query: Callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        callback_data: –î–∞–Ω–Ω—ã–µ –∏–∑ callback
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    """
    logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç %s", query.from_user.username)

    if not user:
        await query.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        logger.warning(
            "–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %s",
            query.from_user.username,
        )
        return

    if not callback_data.connection_id:
        await query.answer("‚ùóÔ∏è –ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        logger.error("ID –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è %s", query.from_user.username)
        return

    connection = await ConnectionRepository(session).get_by_id(
        callback_data.connection_id
    )
    if not connection:
        await query.answer("‚ùóÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        logger.error("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è %s", query.from_user.username)
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –≤ –º–µ—Å—Ç–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
    created_at = connection.created_at.strftime("%Y-%m-%d %H:%M:%S")
    expired_at = connection.expired_at.strftime("%Y-%m-%d %H:%M:%S")

    await query.answer("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ")

    message = await _check_message_accessible(query)
    if message is None:
        return

    back_button = create_back_button(
        UserActionData(
            action=UserAction.conlist,
            chat_id=query.from_user.id,
            user_id=user.id,
        )
    )

    await message.answer(
        f"üì° –î–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n\n"
        f"Email: {connection.email}\n"
        f"URL: <code>{connection.connection_url}</code>\n"
        f"–°–æ–∑–¥–∞–Ω–æ: {created_at}\n"
        f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {expired_at}",
        reply_markup=get_view_connection_markup(
            chat_id=query.from_user.id,
            user_id=user.id,
            connection_id=connection.id,
            back_button=back_button,
            is_admin=user.admin,
        ),
        parse_mode="HTML",
    )


@router.callback_query(UserActionData.filter(F.action == UserAction.deletecon))
async def delete_connection(
    query: types.CallbackQuery,
    callback_data: UserActionData,
    session: AsyncSession,
    user: User | None,
) -> None:
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        query: Callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        callback_data: –î–∞–Ω–Ω—ã–µ –∏–∑ callback
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    """
    logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç %s", query.from_user.username)

    if not user:
        await query.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        logger.warning(
            "–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %s", query.from_user.username
        )
        return

    if not callback_data.connection_id:
        await query.answer("‚ùóÔ∏è –ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        logger.error("ID –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è %s", query.from_user.username)
        return

    try:
        connection = await ConnectionRepository(session).get_by_id(
            callback_data.connection_id
        )
        if not connection:
            await query.answer("‚ùóÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            logger.error("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î –¥–ª—è %s", query.from_user.username)
            return

        api_client = get_async_client()
        existing_connection = await api_client.get_connection(uuid=connection.uuid)

        if existing_connection:
            try:
                await api_client.delete_connection(connection.uuid)
                logger.info(
                    "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ API –¥–ª—è %s",
                    query.from_user.username,
                )
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ API: {str(e)}"
                logger.error(error_msg, exc_info=True)
                await query.answer("‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ API")
                return
        else:
            logger.warning(
                "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ API –¥–ª—è %s (uuid: %s)",
                query.from_user.username,
                connection.uuid,
            )

        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
        if callback_data.absolute_delete:
            await ConnectionRepository(session).delete(connection)
            logger.info(
                "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–æ –∏–∑ –ë–î –¥–ª—è %s", query.from_user.username
            )
        else:
            await ConnectionRepository(session).update(connection, exists_in_api=False)
            logger.info(
                "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ –¥–ª—è %s", query.from_user.username
            )

        await query.answer("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")

        message = await _check_message_accessible(query)
        if message is None:
            return

        text, markup = _handle_start_action(message.chat, user)
        await message.answer(text, reply_markup=markup)

    except Exception as e:
        error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"
        logger.error(error_msg, exc_info=True)
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")


@router.errors()
async def handle_errors(event: types.ErrorEvent) -> None:
    """
    –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞.

    Args:
        event: –°–æ–±—ã—Ç–∏–µ —Å –æ—à–∏–±–∫–æ–π
    """
    logger.critical(
        "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: %s", event.exception, exc_info=True
    )
