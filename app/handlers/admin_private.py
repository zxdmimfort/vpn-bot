import logging
from aiogram import F, Router, types
from sqlalchemy.ext.asyncio import AsyncSession
from typing import cast

from app.db.models import User
from app.db.repository import ConnectionRepository, UserRepository
from app.dependencies.auth import get_admins_list
from app.kbds.menu_markups import (
    AdminAction,
    AdminActionData,
    UserAction,
    UserActionData,
    get_admin_actions_markup,
    get_admin_user_connections_markup,
    get_admin_userlist_markup,
)
from app.login_client import get_async_client
from app.schemas import ClientStats


admins: tuple[str, ...] = get_admins_list()
logger = logging.getLogger(__name__)


router = Router()


async def _check_message_accessible(query: types.CallbackQuery) -> types.Message | None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.

    Args:
        query: Callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        types.Message | None: –°–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ, –∏–Ω–∞—á–µ None
    """
    if not query.message:
        await query.answer("‚ùå –û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        return None
    return cast(types.Message, query.message)


@router.callback_query(UserActionData.filter(F.action == UserAction.adminmarkup))
async def send_admin_actions(
    query: types.CallbackQuery,
    callback_data: UserActionData,
    user: User | None,
    session: AsyncSession,
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    Args:
        query: Callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        callback_data: –î–∞–Ω–Ω—ã–µ –∏–∑ callback
        user: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–ø—Ä–æ—Å–∏–ª –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", query.from_user.username)

    if not user or not user.admin:
        await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        logger.warning(
            "–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–µ–∑ –ø—Ä–∞–≤: %s", query.from_user.username
        )
        return

    message = await _check_message_accessible(query)
    if message is None:
        return

    await message.answer(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_admin_actions_markup(
            chat_id=query.from_user.id,
            user_id=user.id,
        ),
    )


@router.callback_query(AdminActionData.filter(F.action == AdminAction.userlist))
async def send_users_list(
    query: types.CallbackQuery,
    callback_data: AdminActionData,
    user: User | None,
    session: AsyncSession,
) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.

    Args:
        query: Callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        callback_data: –î–∞–Ω–Ω—ã–µ –∏–∑ callback
        user: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    logger.info(
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä %s –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", query.from_user.username
    )

    if not user or not user.admin:
        await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        logger.warning(
            "–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø—Ä–∞–≤: %s",
            query.from_user.username,
        )
        return

    users = await UserRepository(session).get_all()
    if not users:
        await query.answer("‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        logger.warning("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
        return

    message = await _check_message_accessible(query)
    if message is None:
        return

    await message.answer(
        "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
        reply_markup=get_admin_userlist_markup(
            chat_id=query.from_user.id,
            user_id=user.id,
            users=users,
        ),
    )


@router.callback_query(AdminActionData.filter(F.action == AdminAction.userconn))
async def send_user_connections(
    query: types.CallbackQuery,
    callback_data: AdminActionData,
    user: User | None,
    session: AsyncSession,
) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        query: Callback query –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        callback_data: –î–∞–Ω–Ω—ã–µ –∏–∑ callback
        user: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    logger.info(
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä %s –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID=%s",
        query.from_user.username,
        callback_data.user_id,
    )

    if not user or not user.admin:
        await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        logger.warning(
            "–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø—Ä–∞–≤: %s",
            query.from_user.username,
        )
        return

    connections = await ConnectionRepository(session).get_by_user_id(
        user_id=callback_data.user_id, show_deleted=True
    )
    if not connections:
        await query.answer("‚ùóÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        logger.warning(
            "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID=%s", callback_data.user_id
        )
        return

    message = await _check_message_accessible(query)
    if message is None:
        return

    await message.answer(
        "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=get_admin_user_connections_markup(
            chat_id=query.from_user.id,
            user_id=callback_data.user_id,
            connections=connections,
        ),
    )


@router.callback_query(AdminActionData.filter(F.action == AdminAction.connstat))
async def send_connection_stats(
    query: types.CallbackQuery,
    callback_data: AdminActionData,
    user: User | None,
    session: AsyncSession,
) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é.

    Args:
        query: Callback query –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        callback_data: –î–∞–Ω–Ω—ã–µ –∏–∑ callback
        user: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    logger.info(
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä %s –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ID=%s",
        query.from_user.username,
        callback_data.connection_id,
    )

    if not user or not user.admin:
        await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        logger.warning(
            "–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–µ–∑ –ø—Ä–∞–≤: %s",
            query.from_user.username,
        )
        return

    if not callback_data.connection_id:
        await query.answer("‚ùóÔ∏è ID –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω")
        logger.error("ID –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
        return

    connection = await ConnectionRepository(session).get_by_id(
        callback_data.connection_id
    )
    if not connection:
        await query.answer("‚ùóÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        logger.error("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
        return

    try:
        api_client = get_async_client()
        api_connection = await api_client.get_connection(uuid=connection.uuid)
        if not api_connection:
            await query.answer("‚ùóÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ API")
            logger.warning("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ API (uuid: %s)", connection.uuid)
            return

        stats = await api_client.get_stats()
        if not isinstance(stats, ClientStats):
            await query.answer("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ API")
            return

        message = await _check_message_accessible(query)
        if message is None:
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        created_at = connection.created_at.strftime("%Y-%m-%d %H:%M:%S")
        expired_at = connection.expired_at.strftime("%Y-%m-%d %H:%M:%S")

        await message.answer(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n\n"
            f"Email: {connection.email}\n"
            f"–°–æ–∑–¥–∞–Ω–æ: {created_at}\n"
            f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {expired_at}\n"
            f"–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {stats.down / 1024 / 1024:.2f} MB\n"
            f"–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats.up / 1024 / 1024:.2f} MB\n"
            f"–û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: {(stats.up + stats.down) / 1024 / 1024:.2f} MB",
            reply_markup=get_admin_user_connections_markup(
                chat_id=query.from_user.id,
                user_id=callback_data.user_id,
                connections=[connection],
            ),
        )
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
        logger.error(error_msg, exc_info=True)
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
